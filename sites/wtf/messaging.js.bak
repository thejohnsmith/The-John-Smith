/*
	Used to instantiate the connection & build functions to call server.
	cbObj contains parameters that point to callback objects, receiving a single object
	for data.
	e.g. SetupConnection( {
		userName: 'jake',
		qUpdate: function (data){},
		newQuestion: function (data) {}
	})
*/
var SetupConnection = function (cbObj)
{
	var handler = {};

	//var connection = new WebSocket('ws://192.168.150.129:8000');
	
	var connection = $.websocket("ws://192.168.150.129:8000", {
        open: function () {
			console.log('connection opened');
		  connection.send('Ready', {UserName: cbObj.userName}); // Send the message 'Ping' to the server
		},
        close: function() { console.log('connection closed');},
        events: {
                newQuestion: function(e) {
                        cbObj.newQuestion.call(e);
                },
				qUpdate: function(e) {
                        cbObj.qUpdate.call(e);
                }
        }
});
	/*
	// When the connection is open, send some data to the server
	connection.onopen = function () {
		console.log('connection opened');
	  connection.send('SignIn'); // Send the message 'Ping' to the server
	};

	// Log errors
	connection.onerror = function (error) {
	  console.log('WebSocket Error ' + error);
	};

	// Log messages from the server
	connection.onmessage = function (e) {
	  console.log('Server: ' + e.data);
	  switch(e.data.type)
		{
		case 1: //question status update
			cbObj.qUpdate.call(e.data);
			break;
		case 2: //new question
			cbObj.newQuestion.call(e.data);
			break;
		default://unrecognized!
		  console.log('Unrecognized: '+e.data.type);
		}
	  
	};
	*/
	/*
		Closure function, sends the provided message with the provided
		tags (array of strings)
	*/
	handler.SubmitQuestion = function(message, tags)
	{
		console.log('Submitting question '+message);
		
		var msgTags = [];
		/*
		for(var i = 0; i < tags.length; tags++)
		{
			msgTags.push(tags[i]);
		}
		*/
		
		connection.send('NewQuestion', {Question : message});
		
	};
	
	/*
		Closure function, submits an answer for the question
	*/
	handler.SubmitAnswer = function(message)
	{
		console.log('Submitting question '+message);
		connection.send('AnswerQuestion', {Answer : message});
	};
	
	/*
		Closure function, requests a pass on the question
	*/
	handler.PassQuestion = function()
	{
		console.log('Passing question ');
		connection.send('PassQuestion');
	};
	
	
	
	return handler;
	
	
}